#!/usr/bin/env python3

import errtee # this is imported for its side-effects
from collections import defaultdict
import gzip
import re
import json
from datetime import datetime
from urlutils import UrlCache

"""
Reads the list of files in https://downloads.apache.org/zzz/find-ls.gz

Creates:
../../site/json/foundation/releases.json
Format:
{ top-level dir: { release-id: date}, ... }

The release id is derived from the filename by removing common suffixes etc, see cleanFilename()
The date comes from the first entry

../../site/json/foundation/releases-files.json
Format:
{ top-level dir: { release-id: [list of files for that release-id]}, ... }

"""

# Listing generated by find(1) -ls
FIND_LS = 'https://downloads.apache.org/zzz/find-ls.gz'

# key: committee-id, value: dict(key: release version, value: date)
releases = defaultdict(dict)

# key: committee-id, value: dict(key: release version, value: list of file names for the release)
files = defaultdict(lambda: defaultdict(list))

"""
Parse find(1) dates
These have month and day of month, and either year or HH:MM if the date is in the last 6 months or so
If the year is missing, assume the current year.
If that generates a date in the future, assume the previous year.
"""
def getdate(yort, mon, dom):
    now = datetime.utcnow()
    if ':' in yort: # year not provided, assume current year
        stamp = datetime.strptime(f'{now.year} {mon} {dom} {yort}', '%Y %b %d %H:%M')
        if stamp > now:
            stamp = datetime.strptime(f'{now.year-1} {mon} {dom} {yort}', '%Y %b %d %H:%M')
    else:

        stamp = datetime.strptime(f'{yort} {mon} {dom}', '%Y %b %d')
    return stamp.strftime('%Y-%m-%d')

def cleanFilename(filename):
    """
        Attempts to determine the release id to which a file belongs
        Strips extensions such as .tgz etc, then suffixes such as -sources
        Replaces qualifiers such as -assembly-, -parent- by '-'
        Returns the simplified filename .
    """
    for suffix in ['.tgz', '.gz', '.bz2', '.xz', '.zip', '.rar', '.tar', 'tar', '.deb', '.rpm', '.dmg', '.egg', '.gem', '.pom', '.war', '.exe',
                   '-scala2.11', '-cdh4', '-hadoop1', '-hadoop2', '-hadoop2.3', '-hadoop2.4', '-all',
                   '-src', '_src', '.src', '-sources', '_sources', '-source', '-bin', '-dist',
                   '-source-release', '-source-relase', '-apidocs', '-javadocs', '-javadoc', '_javadoc', '-tests', '-test', '-debug', '-uber',
                   '-macosx', '-distribution', '-example', '-manual', '-native', '-win', '-win32', '-linux', '-pack', '-packaged', '-lib', '-current', '-embedded',
                   '-py', '-py2', '-py2.6', '-py2.7', '-no', 'unix-distro', 'windows-distro', 'with', '-dep', '-standalone', '-war', '-webapp', '-dom', '-om', '-manual', '-site',
                   '-32bit', '-64bit', '-amd64', '-i386', '_i386', '.i386', '-x86_64', '-minimal', '-jettyconfig', '-py2.py3-none-any', 'newkey', 'oldkey', 'jars', '-jre13', '-hadoop1', '-hadoop2', '-project',
                   '-with-dependencies', '-client', '-server', '-doc', '-docs', 'server-webapps', '-full', '-all', '-standard', '-for-javaee', '-for-tomcat',
                   'hadoop1-scala2', '-deployer', '-fulldocs', '-windows-i64', '-windows-x64', '-embed', '-apps', '-app', '-ref', '-installer', '-bundle', '-java']:
        if filename[len(filename)-len(suffix):] == suffix:
            filename = filename[0:len(filename)-len(suffix)]
    for repl in ['-assembly-', '-minimal-', '-doc-', '-src-', '-webapp-', '-standalone-', '-parent-', '-project-', '-win32-']:
        filename = filename.replace(repl, '-')
    return filename

def cleanReleases(committeeId):
    if len(releases[committeeId]) == 0:
        del releases[committeeId]
        del files[committeeId]

def parseFile(committeeId, file, date, path):
    if not re.search(r"(MD5SUM|SHA1SUM|\.s?nupkg|\.md5|\.mds|\.sh1|\.sh2|\.sha|\.asc|\.sig|\.bin|\.pom|\.jar|\.whl|\.pdf|\.xml|\.xsd|\.html|\.txt|\.cfg|\.ish|\.pl|RELEASE.NOTES|LICENSE|KEYS|CHANGELOG|NOTICE|MANIFEST|Changes|readme|x86|amd64|-manual\.|-docs\.|-docs-|-doc-|Announcement|current|-deps|-dependencies|binary|-bin-|-bin\.|-javadoc-|-distro|rat_report|\.png|\.jpg|\.gif|\.sqlite|\.yaml|\.yml|\.prov)", file, flags=re.IGNORECASE):
        filename = cleanFilename(file)
        if len(filename) > 1:
            if filename not in releases[committeeId]:
                releases[committeeId][filename] = date
                files[committeeId][filename] = []
                print(f"                  - {filename}\t\t\t{file}")
            files[committeeId][filename].append(path)

# Don't visit these directories
SKIP_DIRS=['hidden', 'css', 'META', 'website', 'binaries', 'repos', 'updatesite', 'current', 'stable', 'stable1', 'stable2', 'binary', 'notes', 'doc', 'eclipse', 'patches', 'docs', 'changes', 'features', 'tmp', 'cpp', 'php', 'ruby', 'py', 'py3', 'issuesfixed', 'images', 'styles', 'wikipages']

def main():
    uc = UrlCache(silent=True)
    find_ls = uc.get(FIND_LS, name='find-ls.gz')
    #  45350913      4 drwxr-xr-x 239 svnwc    svnwc        4096 Sep  9 12:08 . [-> other]
    #      0         1     2       3   4         5            6   7   8  9    10
    with gzip.open(find_ls, mode='rt') as r:
        for l in r:
            fields = l.split() # split the find line (the split drops the final LF)
            if not fields[2].startswith('-'): # only want plain files
                continue
            path = fields.pop()[2:] # last entry on line is the path; also drop the ./ prefix
            segs = path.split('/')
            if len(segs) == 1: # ignore top level files
                continue
            file = segs.pop() # basename
            # Ignore invisible files
            if file.startswith('.') or file in ['favicon.ico', 'META']:
                continue
            if any( seg in SKIP_DIRS for seg in segs):
                # print('SKIP', segs)
                continue

            committeeId = segs[0]
            if committeeId in ['zzz']:
                continue
            if committeeId == 'incubator':
                podling = segs[1]
                committeeId = f'incubator-{podling}'
            # Now store the info
            yort = fields.pop()
            dom = fields.pop()
            mon = fields.pop()
            stamp = getdate(yort, mon, dom)
            parseFile(committeeId, file, stamp, path)

if __name__ == '__main__':
    main()
    print("Writing releases.json")
    with open("../../site/json/foundation/releases.json", "w") as f:
        json.dump(releases, f, sort_keys=True, indent=0)
    print("Writing releases-files.json")
    with open("../../site/json/foundation/releases-files.json", "w") as f:
        json.dump(files, f, sort_keys=True, indent=0)
    print("All done!")
